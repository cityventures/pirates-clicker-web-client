// @generated by protoc-gen-es v2.0.0 with parameter "json_types=true"
// @generated from file clicker.proto (package clicker, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file clicker.proto.
 */
export declare const file_clicker: GenFile;

/**
 * @generated from message clicker.CheckPromoRoomAccessRequest
 */
export declare type CheckPromoRoomAccessRequest = Message<"clicker.CheckPromoRoomAccessRequest"> & {
  /**
   * @generated from field: string req_data = 1;
   */
  reqData: string;

  /**
   * @generated from field: int64 id = 2;
   */
  id: bigint;
};

/**
 * JSON type for the message clicker.CheckPromoRoomAccessRequest.
 */
export declare type CheckPromoRoomAccessRequestJson = {
  /**
   * @generated from field: string req_data = 1;
   */
  reqData?: string;

  /**
   * @generated from field: int64 id = 2;
   */
  id?: string;
};

/**
 * Describes the message clicker.CheckPromoRoomAccessRequest.
 * Use `create(CheckPromoRoomAccessRequestSchema)` to create a new message.
 */
export declare const CheckPromoRoomAccessRequestSchema: GenMessage<CheckPromoRoomAccessRequest, CheckPromoRoomAccessRequestJson>;

/**
 * @generated from message clicker.CheckPromoRoomAccessResponse
 */
export declare type CheckPromoRoomAccessResponse = Message<"clicker.CheckPromoRoomAccessResponse"> & {
  /**
   * @generated from field: bool has_access = 1;
   */
  hasAccess: boolean;
};

/**
 * JSON type for the message clicker.CheckPromoRoomAccessResponse.
 */
export declare type CheckPromoRoomAccessResponseJson = {
  /**
   * @generated from field: bool has_access = 1;
   */
  hasAccess?: boolean;
};

/**
 * Describes the message clicker.CheckPromoRoomAccessResponse.
 * Use `create(CheckPromoRoomAccessResponseSchema)` to create a new message.
 */
export declare const CheckPromoRoomAccessResponseSchema: GenMessage<CheckPromoRoomAccessResponse, CheckPromoRoomAccessResponseJson>;

/**
 * @generated from message clicker.LookupRoomRequest
 */
export declare type LookupRoomRequest = Message<"clicker.LookupRoomRequest"> & {
  /**
   * @generated from oneof clicker.LookupRoomRequest.field
   */
  field: {
    /**
     * @generated from field: string slug = 1;
     */
    value: string;
    case: "slug";
  } | {
    /**
     * @generated from field: int64 id = 2;
     */
    value: bigint;
    case: "id";
  } | { case: undefined; value?: undefined };
};

/**
 * JSON type for the message clicker.LookupRoomRequest.
 */
export declare type LookupRoomRequestJson = {
  /**
   * @generated from field: string slug = 1;
   */
  slug?: string;

  /**
   * @generated from field: int64 id = 2;
   */
  id?: string;
};

/**
 * Describes the message clicker.LookupRoomRequest.
 * Use `create(LookupRoomRequestSchema)` to create a new message.
 */
export declare const LookupRoomRequestSchema: GenMessage<LookupRoomRequest, LookupRoomRequestJson>;

/**
 * @generated from message clicker.PromoRoomsRequest
 */
export declare type PromoRoomsRequest = Message<"clicker.PromoRoomsRequest"> & {
};

/**
 * JSON type for the message clicker.PromoRoomsRequest.
 */
export declare type PromoRoomsRequestJson = {
};

/**
 * Describes the message clicker.PromoRoomsRequest.
 * Use `create(PromoRoomsRequestSchema)` to create a new message.
 */
export declare const PromoRoomsRequestSchema: GenMessage<PromoRoomsRequest, PromoRoomsRequestJson>;

/**
 * @generated from message clicker.RoomsResponse
 */
export declare type RoomsResponse = Message<"clicker.RoomsResponse"> & {
  /**
   * @generated from field: repeated clicker.RoomResponse rooms = 1;
   */
  rooms: RoomResponse[];
};

/**
 * JSON type for the message clicker.RoomsResponse.
 */
export declare type RoomsResponseJson = {
  /**
   * @generated from field: repeated clicker.RoomResponse rooms = 1;
   */
  rooms?: RoomResponseJson[];
};

/**
 * Describes the message clicker.RoomsResponse.
 * Use `create(RoomsResponseSchema)` to create a new message.
 */
export declare const RoomsResponseSchema: GenMessage<RoomsResponse, RoomsResponseJson>;

/**
 * @generated from message clicker.RoomResponse
 */
export declare type RoomResponse = Message<"clicker.RoomResponse"> & {
  /**
   * @generated from field: int64 id = 1;
   */
  id: bigint;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string username = 3;
   */
  username: string;

  /**
   * @generated from field: int64 online = 4;
   */
  online: bigint;

  /**
   * @generated from field: clicker.RoomVariant variant = 5;
   */
  variant: RoomVariant;

  /**
   * @generated from field: repeated clicker.CustomReward custom_rewards = 6;
   */
  customRewards: CustomReward[];
};

/**
 * JSON type for the message clicker.RoomResponse.
 */
export declare type RoomResponseJson = {
  /**
   * @generated from field: int64 id = 1;
   */
  id?: string;

  /**
   * @generated from field: string name = 2;
   */
  name?: string;

  /**
   * @generated from field: string username = 3;
   */
  username?: string;

  /**
   * @generated from field: int64 online = 4;
   */
  online?: string;

  /**
   * @generated from field: clicker.RoomVariant variant = 5;
   */
  variant?: RoomVariantJson;

  /**
   * @generated from field: repeated clicker.CustomReward custom_rewards = 6;
   */
  customRewards?: CustomRewardJson[];
};

/**
 * Describes the message clicker.RoomResponse.
 * Use `create(RoomResponseSchema)` to create a new message.
 */
export declare const RoomResponseSchema: GenMessage<RoomResponse, RoomResponseJson>;

/**
 * @generated from message clicker.CustomReward
 */
export declare type CustomReward = Message<"clicker.CustomReward"> & {
  /**
   * @generated from field: clicker.RewardVariant variant = 1;
   */
  variant: RewardVariant;

  /**
   * @generated from field: double amount = 2;
   */
  amount: number;
};

/**
 * JSON type for the message clicker.CustomReward.
 */
export declare type CustomRewardJson = {
  /**
   * @generated from field: clicker.RewardVariant variant = 1;
   */
  variant?: RewardVariantJson;

  /**
   * @generated from field: double amount = 2;
   */
  amount?: number | "NaN" | "Infinity" | "-Infinity";
};

/**
 * Describes the message clicker.CustomReward.
 * Use `create(CustomRewardSchema)` to create a new message.
 */
export declare const CustomRewardSchema: GenMessage<CustomReward, CustomRewardJson>;

/**
 * @generated from message clicker.IslandInvoiceRequest
 */
export declare type IslandInvoiceRequest = Message<"clicker.IslandInvoiceRequest"> & {
  /**
   * @generated from field: string req_data = 1;
   */
  reqData: string;

  /**
   * @generated from field: uint64 room_id = 2;
   */
  roomId: bigint;
};

/**
 * JSON type for the message clicker.IslandInvoiceRequest.
 */
export declare type IslandInvoiceRequestJson = {
  /**
   * @generated from field: string req_data = 1;
   */
  reqData?: string;

  /**
   * @generated from field: uint64 room_id = 2;
   */
  roomId?: string;
};

/**
 * Describes the message clicker.IslandInvoiceRequest.
 * Use `create(IslandInvoiceRequestSchema)` to create a new message.
 */
export declare const IslandInvoiceRequestSchema: GenMessage<IslandInvoiceRequest, IslandInvoiceRequestJson>;

/**
 * @generated from message clicker.SpotInvoiceRequest
 */
export declare type SpotInvoiceRequest = Message<"clicker.SpotInvoiceRequest"> & {
  /**
   * @generated from field: string req_data = 1;
   */
  reqData: string;

  /**
   * @generated from field: int64 amount = 2;
   */
  amount: bigint;

  /**
   * @generated from field: uint64 room_id = 3;
   */
  roomId: bigint;
};

/**
 * JSON type for the message clicker.SpotInvoiceRequest.
 */
export declare type SpotInvoiceRequestJson = {
  /**
   * @generated from field: string req_data = 1;
   */
  reqData?: string;

  /**
   * @generated from field: int64 amount = 2;
   */
  amount?: string;

  /**
   * @generated from field: uint64 room_id = 3;
   */
  roomId?: string;
};

/**
 * Describes the message clicker.SpotInvoiceRequest.
 * Use `create(SpotInvoiceRequestSchema)` to create a new message.
 */
export declare const SpotInvoiceRequestSchema: GenMessage<SpotInvoiceRequest, SpotInvoiceRequestJson>;

/**
 * @generated from message clicker.InvoiceRequest
 */
export declare type InvoiceRequest = Message<"clicker.InvoiceRequest"> & {
  /**
   * @generated from field: string req_data = 1;
   */
  reqData: string;
};

/**
 * JSON type for the message clicker.InvoiceRequest.
 */
export declare type InvoiceRequestJson = {
  /**
   * @generated from field: string req_data = 1;
   */
  reqData?: string;
};

/**
 * Describes the message clicker.InvoiceRequest.
 * Use `create(InvoiceRequestSchema)` to create a new message.
 */
export declare const InvoiceRequestSchema: GenMessage<InvoiceRequest, InvoiceRequestJson>;

/**
 * @generated from message clicker.InvoiceResponse
 */
export declare type InvoiceResponse = Message<"clicker.InvoiceResponse"> & {
  /**
   * @generated from field: string link = 1;
   */
  link: string;
};

/**
 * JSON type for the message clicker.InvoiceResponse.
 */
export declare type InvoiceResponseJson = {
  /**
   * @generated from field: string link = 1;
   */
  link?: string;
};

/**
 * Describes the message clicker.InvoiceResponse.
 * Use `create(InvoiceResponseSchema)` to create a new message.
 */
export declare const InvoiceResponseSchema: GenMessage<InvoiceResponse, InvoiceResponseJson>;

/**
 * @generated from message clicker.MeRequest
 */
export declare type MeRequest = Message<"clicker.MeRequest"> & {
  /**
   * @generated from field: string req_data = 1;
   */
  reqData: string;
};

/**
 * JSON type for the message clicker.MeRequest.
 */
export declare type MeRequestJson = {
  /**
   * @generated from field: string req_data = 1;
   */
  reqData?: string;
};

/**
 * Describes the message clicker.MeRequest.
 * Use `create(MeRequestSchema)` to create a new message.
 */
export declare const MeRequestSchema: GenMessage<MeRequest, MeRequestJson>;

/**
 * @generated from message clicker.MeResponse
 */
export declare type MeResponse = Message<"clicker.MeResponse"> & {
  /**
   * @generated from field: map<string, double> balances = 1;
   */
  balances: { [key: string]: number };

  /**
   * @generated from field: int32 level = 2;
   */
  level: number;

  /**
   * @generated from field: int32 clicks_per_second = 3;
   */
  clicksPerSecond: number;

  /**
   * @generated from field: int32 refs = 4;
   */
  refs: number;

  /**
   * @generated from field: int64 boost_until = 5;
   */
  boostUntil: bigint;

  /**
   * @generated from field: bool island_active = 7;
   */
  islandActive: boolean;
};

/**
 * JSON type for the message clicker.MeResponse.
 */
export declare type MeResponseJson = {
  /**
   * @generated from field: map<string, double> balances = 1;
   */
  balances?: { [key: string]: number | "NaN" | "Infinity" | "-Infinity" };

  /**
   * @generated from field: int32 level = 2;
   */
  level?: number;

  /**
   * @generated from field: int32 clicks_per_second = 3;
   */
  clicksPerSecond?: number;

  /**
   * @generated from field: int32 refs = 4;
   */
  refs?: number;

  /**
   * @generated from field: int64 boost_until = 5;
   */
  boostUntil?: string;

  /**
   * @generated from field: bool island_active = 7;
   */
  islandActive?: boolean;
};

/**
 * Describes the message clicker.MeResponse.
 * Use `create(MeResponseSchema)` to create a new message.
 */
export declare const MeResponseSchema: GenMessage<MeResponse, MeResponseJson>;

/**
 * @generated from message clicker.Request
 */
export declare type Request = Message<"clicker.Request"> & {
  /**
   * @generated from oneof clicker.Request.data
   */
  data: {
    /**
     * @generated from field: clicker.Join join = 1;
     */
    value: Join;
    case: "join";
  } | {
    /**
     * @generated from field: clicker.Click click = 2;
     */
    value: Click;
    case: "click";
  } | {
    /**
     * @generated from field: clicker.SetCityName setCityName = 3;
     */
    value: SetCityName;
    case: "setCityName";
  } | {
    /**
     * @generated from field: clicker.GetTop getTop = 4;
     */
    value: GetTop;
    case: "getTop";
  } | {
    /**
     * @generated from field: clicker.Ping ping = 5;
     */
    value: Ping;
    case: "ping";
  } | { case: undefined; value?: undefined };
};

/**
 * JSON type for the message clicker.Request.
 */
export declare type RequestJson = {
  /**
   * @generated from field: clicker.Join join = 1;
   */
  join?: JoinJson;

  /**
   * @generated from field: clicker.Click click = 2;
   */
  click?: ClickJson;

  /**
   * @generated from field: clicker.SetCityName setCityName = 3;
   */
  setCityName?: SetCityNameJson;

  /**
   * @generated from field: clicker.GetTop getTop = 4;
   */
  getTop?: GetTopJson;

  /**
   * @generated from field: clicker.Ping ping = 5;
   */
  ping?: PingJson;
};

/**
 * Describes the message clicker.Request.
 * Use `create(RequestSchema)` to create a new message.
 */
export declare const RequestSchema: GenMessage<Request, RequestJson>;

/**
 * @generated from message clicker.Join
 */
export declare type Join = Message<"clicker.Join"> & {
  /**
   * @generated from field: string telegram_data = 1;
   */
  telegramData: string;

  /**
   * @generated from field: int64 room_id = 2;
   */
  roomId: bigint;

  /**
   * @generated from field: optional int64 ref_id = 3;
   */
  refId?: bigint;
};

/**
 * JSON type for the message clicker.Join.
 */
export declare type JoinJson = {
  /**
   * @generated from field: string telegram_data = 1;
   */
  telegramData?: string;

  /**
   * @generated from field: int64 room_id = 2;
   */
  roomId?: string;

  /**
   * @generated from field: optional int64 ref_id = 3;
   */
  refId?: string;
};

/**
 * Describes the message clicker.Join.
 * Use `create(JoinSchema)` to create a new message.
 */
export declare const JoinSchema: GenMessage<Join, JoinJson>;

/**
 * @generated from message clicker.Click
 */
export declare type Click = Message<"clicker.Click"> & {
  /**
   * @generated from field: int32 x = 1;
   */
  x: number;

  /**
   * @generated from field: int32 y = 2;
   */
  y: number;

  /**
   * @generated from field: double page_x = 3;
   */
  pageX: number;

  /**
   * @generated from field: double page_y = 4;
   */
  pageY: number;
};

/**
 * JSON type for the message clicker.Click.
 */
export declare type ClickJson = {
  /**
   * @generated from field: int32 x = 1;
   */
  x?: number;

  /**
   * @generated from field: int32 y = 2;
   */
  y?: number;

  /**
   * @generated from field: double page_x = 3;
   */
  pageX?: number | "NaN" | "Infinity" | "-Infinity";

  /**
   * @generated from field: double page_y = 4;
   */
  pageY?: number | "NaN" | "Infinity" | "-Infinity";
};

/**
 * Describes the message clicker.Click.
 * Use `create(ClickSchema)` to create a new message.
 */
export declare const ClickSchema: GenMessage<Click, ClickJson>;

/**
 * @generated from message clicker.SetCityName
 */
export declare type SetCityName = Message<"clicker.SetCityName"> & {
  /**
   * @generated from field: string city_name = 1;
   */
  cityName: string;

  /**
   * @generated from field: string city_username = 2;
   */
  cityUsername: string;
};

/**
 * JSON type for the message clicker.SetCityName.
 */
export declare type SetCityNameJson = {
  /**
   * @generated from field: string city_name = 1;
   */
  cityName?: string;

  /**
   * @generated from field: string city_username = 2;
   */
  cityUsername?: string;
};

/**
 * Describes the message clicker.SetCityName.
 * Use `create(SetCityNameSchema)` to create a new message.
 */
export declare const SetCityNameSchema: GenMessage<SetCityName, SetCityNameJson>;

/**
 * @generated from message clicker.GetTop
 */
export declare type GetTop = Message<"clicker.GetTop"> & {
};

/**
 * JSON type for the message clicker.GetTop.
 */
export declare type GetTopJson = {
};

/**
 * Describes the message clicker.GetTop.
 * Use `create(GetTopSchema)` to create a new message.
 */
export declare const GetTopSchema: GenMessage<GetTop, GetTopJson>;

/**
 * @generated from message clicker.Ping
 */
export declare type Ping = Message<"clicker.Ping"> & {
};

/**
 * JSON type for the message clicker.Ping.
 */
export declare type PingJson = {
};

/**
 * Describes the message clicker.Ping.
 * Use `create(PingSchema)` to create a new message.
 */
export declare const PingSchema: GenMessage<Ping, PingJson>;

/**
 * @generated from message clicker.Response
 */
export declare type Response = Message<"clicker.Response"> & {
  /**
   * @generated from field: uint64 id = 1;
   */
  id: bigint;

  /**
   * @generated from oneof clicker.Response.data
   */
  data: {
    /**
     * @generated from field: clicker.Reward reward = 2;
     */
    value: Reward;
    case: "reward";
  } | {
    /**
     * @generated from field: clicker.ClaimReward claimReward = 3;
     */
    value: ClaimReward;
    case: "claimReward";
  } | {
    /**
     * @generated from field: clicker.StartClaiming startClaiming = 4;
     */
    value: StartClaiming;
    case: "startClaiming";
  } | {
    /**
     * @generated from field: clicker.UserJoined userJoined = 5;
     */
    value: UserJoined;
    case: "userJoined";
  } | {
    /**
     * @generated from field: clicker.JoinFailed join_failed = 6;
     */
    value: JoinFailed;
    case: "joinFailed";
  } | {
    /**
     * @generated from field: clicker.UserLeft userLeft = 7;
     */
    value: UserLeft;
    case: "userLeft";
  } | {
    /**
     * @generated from field: clicker.CityNameSet cityNameSet = 8;
     */
    value: CityNameSet;
    case: "cityNameSet";
  } | {
    /**
     * @generated from field: clicker.Top top = 9;
     */
    value: Top;
    case: "top";
  } | {
    /**
     * @generated from field: clicker.TotalOnline totalOnline = 10;
     */
    value: TotalOnline;
    case: "totalOnline";
  } | {
    /**
     * @generated from field: clicker.RoomUpdate roomUpdate = 11;
     */
    value: RoomUpdate;
    case: "roomUpdate";
  } | {
    /**
     * @generated from field: clicker.Kick kick = 12;
     */
    value: Kick;
    case: "kick";
  } | {
    /**
     * @generated from field: clicker.BoostActivated boost_activated = 13;
     */
    value: BoostActivated;
    case: "boostActivated";
  } | { case: undefined; value?: undefined };
};

/**
 * JSON type for the message clicker.Response.
 */
export declare type ResponseJson = {
  /**
   * @generated from field: uint64 id = 1;
   */
  id?: string;

  /**
   * @generated from field: clicker.Reward reward = 2;
   */
  reward?: RewardJson;

  /**
   * @generated from field: clicker.ClaimReward claimReward = 3;
   */
  claimReward?: ClaimRewardJson;

  /**
   * @generated from field: clicker.StartClaiming startClaiming = 4;
   */
  startClaiming?: StartClaimingJson;

  /**
   * @generated from field: clicker.UserJoined userJoined = 5;
   */
  userJoined?: UserJoinedJson;

  /**
   * @generated from field: clicker.JoinFailed join_failed = 6;
   */
  joinFailed?: JoinFailedJson;

  /**
   * @generated from field: clicker.UserLeft userLeft = 7;
   */
  userLeft?: UserLeftJson;

  /**
   * @generated from field: clicker.CityNameSet cityNameSet = 8;
   */
  cityNameSet?: CityNameSetJson;

  /**
   * @generated from field: clicker.Top top = 9;
   */
  top?: TopJson;

  /**
   * @generated from field: clicker.TotalOnline totalOnline = 10;
   */
  totalOnline?: TotalOnlineJson;

  /**
   * @generated from field: clicker.RoomUpdate roomUpdate = 11;
   */
  roomUpdate?: RoomUpdateJson;

  /**
   * @generated from field: clicker.Kick kick = 12;
   */
  kick?: KickJson;

  /**
   * @generated from field: clicker.BoostActivated boost_activated = 13;
   */
  boostActivated?: BoostActivatedJson;
};

/**
 * Describes the message clicker.Response.
 * Use `create(ResponseSchema)` to create a new message.
 */
export declare const ResponseSchema: GenMessage<Response, ResponseJson>;

/**
 * @generated from message clicker.BoostActivated
 */
export declare type BoostActivated = Message<"clicker.BoostActivated"> & {
  /**
   * @generated from field: int64 user_id = 1;
   */
  userId: bigint;

  /**
   * @generated from field: int64 until = 2;
   */
  until: bigint;
};

/**
 * JSON type for the message clicker.BoostActivated.
 */
export declare type BoostActivatedJson = {
  /**
   * @generated from field: int64 user_id = 1;
   */
  userId?: string;

  /**
   * @generated from field: int64 until = 2;
   */
  until?: string;
};

/**
 * Describes the message clicker.BoostActivated.
 * Use `create(BoostActivatedSchema)` to create a new message.
 */
export declare const BoostActivatedSchema: GenMessage<BoostActivated, BoostActivatedJson>;

/**
 * @generated from message clicker.Kick
 */
export declare type Kick = Message<"clicker.Kick"> & {
  /**
   * @generated from field: string reason = 1;
   */
  reason: string;
};

/**
 * JSON type for the message clicker.Kick.
 */
export declare type KickJson = {
  /**
   * @generated from field: string reason = 1;
   */
  reason?: string;
};

/**
 * Describes the message clicker.Kick.
 * Use `create(KickSchema)` to create a new message.
 */
export declare const KickSchema: GenMessage<Kick, KickJson>;

/**
 * @generated from message clicker.Reward
 */
export declare type Reward = Message<"clicker.Reward"> & {
  /**
   * @generated from field: int64 user_id = 1;
   */
  userId: bigint;

  /**
   * @generated from field: string username = 2;
   */
  username: string;

  /**
   * @generated from field: int64 amount = 3;
   */
  amount: bigint;

  /**
   * @generated from field: int64 total_amount = 4;
   */
  totalAmount: bigint;

  /**
   * @generated from field: int64 total_room_amount = 5;
   */
  totalRoomAmount: bigint;

  /**
   * @generated from field: int32 x = 6;
   */
  x: number;

  /**
   * @generated from field: int32 y = 7;
   */
  y: number;

  /**
   * @generated from field: double page_x = 8;
   */
  pageX: number;

  /**
   * @generated from field: double page_y = 9;
   */
  pageY: number;
};

/**
 * JSON type for the message clicker.Reward.
 */
export declare type RewardJson = {
  /**
   * @generated from field: int64 user_id = 1;
   */
  userId?: string;

  /**
   * @generated from field: string username = 2;
   */
  username?: string;

  /**
   * @generated from field: int64 amount = 3;
   */
  amount?: string;

  /**
   * @generated from field: int64 total_amount = 4;
   */
  totalAmount?: string;

  /**
   * @generated from field: int64 total_room_amount = 5;
   */
  totalRoomAmount?: string;

  /**
   * @generated from field: int32 x = 6;
   */
  x?: number;

  /**
   * @generated from field: int32 y = 7;
   */
  y?: number;

  /**
   * @generated from field: double page_x = 8;
   */
  pageX?: number | "NaN" | "Infinity" | "-Infinity";

  /**
   * @generated from field: double page_y = 9;
   */
  pageY?: number | "NaN" | "Infinity" | "-Infinity";
};

/**
 * Describes the message clicker.Reward.
 * Use `create(RewardSchema)` to create a new message.
 */
export declare const RewardSchema: GenMessage<Reward, RewardJson>;

/**
 * @generated from message clicker.ClaimReward
 */
export declare type ClaimReward = Message<"clicker.ClaimReward"> & {
  /**
   * @generated from field: int64 user_id = 1;
   */
  userId: bigint;

  /**
   * @generated from field: string username = 2;
   */
  username: string;

  /**
   * @generated from field: clicker.RewardType reward = 3;
   */
  reward?: RewardType;

  /**
   * @generated from field: int32 x = 4;
   */
  x: number;

  /**
   * @generated from field: int32 y = 5;
   */
  y: number;

  /**
   * @generated from field: double page_x = 6;
   */
  pageX: number;

  /**
   * @generated from field: double page_y = 7;
   */
  pageY: number;
};

/**
 * JSON type for the message clicker.ClaimReward.
 */
export declare type ClaimRewardJson = {
  /**
   * @generated from field: int64 user_id = 1;
   */
  userId?: string;

  /**
   * @generated from field: string username = 2;
   */
  username?: string;

  /**
   * @generated from field: clicker.RewardType reward = 3;
   */
  reward?: RewardTypeJson;

  /**
   * @generated from field: int32 x = 4;
   */
  x?: number;

  /**
   * @generated from field: int32 y = 5;
   */
  y?: number;

  /**
   * @generated from field: double page_x = 6;
   */
  pageX?: number | "NaN" | "Infinity" | "-Infinity";

  /**
   * @generated from field: double page_y = 7;
   */
  pageY?: number | "NaN" | "Infinity" | "-Infinity";
};

/**
 * Describes the message clicker.ClaimReward.
 * Use `create(ClaimRewardSchema)` to create a new message.
 */
export declare const ClaimRewardSchema: GenMessage<ClaimReward, ClaimRewardJson>;

/**
 * @generated from message clicker.RewardType
 */
export declare type RewardType = Message<"clicker.RewardType"> & {
  /**
   * @generated from field: string variant = 1;
   */
  variant: string;

  /**
   * @generated from field: double amount = 2;
   */
  amount: number;

  /**
   * @generated from field: clicker.Rarity rarity = 3;
   */
  rarity?: Rarity;

  /**
   * @generated from field: int64 deep = 4;
   */
  deep: bigint;
};

/**
 * JSON type for the message clicker.RewardType.
 */
export declare type RewardTypeJson = {
  /**
   * @generated from field: string variant = 1;
   */
  variant?: string;

  /**
   * @generated from field: double amount = 2;
   */
  amount?: number | "NaN" | "Infinity" | "-Infinity";

  /**
   * @generated from field: clicker.Rarity rarity = 3;
   */
  rarity?: RarityJson;

  /**
   * @generated from field: int64 deep = 4;
   */
  deep?: string;
};

/**
 * Describes the message clicker.RewardType.
 * Use `create(RewardTypeSchema)` to create a new message.
 */
export declare const RewardTypeSchema: GenMessage<RewardType, RewardTypeJson>;

/**
 * @generated from message clicker.Rarity
 */
export declare type Rarity = Message<"clicker.Rarity"> & {
  /**
   * @generated from field: int64 from = 1;
   */
  from: bigint;

  /**
   * @generated from field: int64 to = 2;
   */
  to: bigint;
};

/**
 * JSON type for the message clicker.Rarity.
 */
export declare type RarityJson = {
  /**
   * @generated from field: int64 from = 1;
   */
  from?: string;

  /**
   * @generated from field: int64 to = 2;
   */
  to?: string;
};

/**
 * Describes the message clicker.Rarity.
 * Use `create(RaritySchema)` to create a new message.
 */
export declare const RaritySchema: GenMessage<Rarity, RarityJson>;

/**
 * @generated from message clicker.StartClaiming
 */
export declare type StartClaiming = Message<"clicker.StartClaiming"> & {
  /**
   * @generated from field: int64 user_id = 1;
   */
  userId: bigint;

  /**
   * @generated from field: string username = 2;
   */
  username: string;

  /**
   * @generated from field: int32 x = 3;
   */
  x: number;

  /**
   * @generated from field: int32 y = 4;
   */
  y: number;

  /**
   * @generated from field: uint64 time = 5;
   */
  time: bigint;
};

/**
 * JSON type for the message clicker.StartClaiming.
 */
export declare type StartClaimingJson = {
  /**
   * @generated from field: int64 user_id = 1;
   */
  userId?: string;

  /**
   * @generated from field: string username = 2;
   */
  username?: string;

  /**
   * @generated from field: int32 x = 3;
   */
  x?: number;

  /**
   * @generated from field: int32 y = 4;
   */
  y?: number;

  /**
   * @generated from field: uint64 time = 5;
   */
  time?: string;
};

/**
 * Describes the message clicker.StartClaiming.
 * Use `create(StartClaimingSchema)` to create a new message.
 */
export declare const StartClaimingSchema: GenMessage<StartClaiming, StartClaimingJson>;

/**
 * @generated from message clicker.UserJoined
 */
export declare type UserJoined = Message<"clicker.UserJoined"> & {
  /**
   * @generated from field: int64 user_id = 1;
   */
  userId: bigint;

  /**
   * @generated from field: string username = 2;
   */
  username: string;

  /**
   * @generated from field: int64 total_amount = 3;
   */
  totalAmount: bigint;

  /**
   * @generated from field: int64 boost_until = 4;
   */
  boostUntil: bigint;
};

/**
 * JSON type for the message clicker.UserJoined.
 */
export declare type UserJoinedJson = {
  /**
   * @generated from field: int64 user_id = 1;
   */
  userId?: string;

  /**
   * @generated from field: string username = 2;
   */
  username?: string;

  /**
   * @generated from field: int64 total_amount = 3;
   */
  totalAmount?: string;

  /**
   * @generated from field: int64 boost_until = 4;
   */
  boostUntil?: string;
};

/**
 * Describes the message clicker.UserJoined.
 * Use `create(UserJoinedSchema)` to create a new message.
 */
export declare const UserJoinedSchema: GenMessage<UserJoined, UserJoinedJson>;

/**
 * @generated from message clicker.JoinFailed
 */
export declare type JoinFailed = Message<"clicker.JoinFailed"> & {
  /**
   * @generated from field: int64 user_id = 1;
   */
  userId: bigint;

  /**
   * @generated from field: string reason = 2;
   */
  reason: string;

  /**
   * @generated from oneof clicker.JoinFailed.details
   */
  details: {
    /**
     * @generated from field: clicker.JoinFailed_Inactive inactive = 3;
     */
    value: JoinFailed_Inactive;
    case: "inactive";
  } | {
    /**
     * @generated from field: clicker.JoinFailed_MustJoinChannel must_join_channel = 4;
     */
    value: JoinFailed_MustJoinChannel;
    case: "mustJoinChannel";
  } | { case: undefined; value?: undefined };
};

/**
 * JSON type for the message clicker.JoinFailed.
 */
export declare type JoinFailedJson = {
  /**
   * @generated from field: int64 user_id = 1;
   */
  userId?: string;

  /**
   * @generated from field: string reason = 2;
   */
  reason?: string;

  /**
   * @generated from field: clicker.JoinFailed_Inactive inactive = 3;
   */
  inactive?: JoinFailed_InactiveJson;

  /**
   * @generated from field: clicker.JoinFailed_MustJoinChannel must_join_channel = 4;
   */
  mustJoinChannel?: JoinFailed_MustJoinChannelJson;
};

/**
 * Describes the message clicker.JoinFailed.
 * Use `create(JoinFailedSchema)` to create a new message.
 */
export declare const JoinFailedSchema: GenMessage<JoinFailed, JoinFailedJson>;

/**
 * @generated from message clicker.JoinFailed_Inactive
 */
export declare type JoinFailed_Inactive = Message<"clicker.JoinFailed_Inactive"> & {
  /**
   * @generated from field: int32 users_to_invite = 1;
   */
  usersToInvite: number;
};

/**
 * JSON type for the message clicker.JoinFailed_Inactive.
 */
export declare type JoinFailed_InactiveJson = {
  /**
   * @generated from field: int32 users_to_invite = 1;
   */
  usersToInvite?: number;
};

/**
 * Describes the message clicker.JoinFailed_Inactive.
 * Use `create(JoinFailed_InactiveSchema)` to create a new message.
 */
export declare const JoinFailed_InactiveSchema: GenMessage<JoinFailed_Inactive, JoinFailed_InactiveJson>;

/**
 * @generated from message clicker.JoinFailed_MustJoinChannel
 */
export declare type JoinFailed_MustJoinChannel = Message<"clicker.JoinFailed_MustJoinChannel"> & {
  /**
   * @generated from field: int64 channel_id = 1;
   */
  channelId: bigint;

  /**
   * @generated from field: string join_link = 2;
   */
  joinLink: string;
};

/**
 * JSON type for the message clicker.JoinFailed_MustJoinChannel.
 */
export declare type JoinFailed_MustJoinChannelJson = {
  /**
   * @generated from field: int64 channel_id = 1;
   */
  channelId?: string;

  /**
   * @generated from field: string join_link = 2;
   */
  joinLink?: string;
};

/**
 * Describes the message clicker.JoinFailed_MustJoinChannel.
 * Use `create(JoinFailed_MustJoinChannelSchema)` to create a new message.
 */
export declare const JoinFailed_MustJoinChannelSchema: GenMessage<JoinFailed_MustJoinChannel, JoinFailed_MustJoinChannelJson>;

/**
 * @generated from message clicker.UserLeft
 */
export declare type UserLeft = Message<"clicker.UserLeft"> & {
  /**
   * @generated from field: int64 user_id = 1;
   */
  userId: bigint;

  /**
   * @generated from field: string username = 2;
   */
  username: string;

  /**
   * @generated from field: int64 total_online = 3;
   */
  totalOnline: bigint;
};

/**
 * JSON type for the message clicker.UserLeft.
 */
export declare type UserLeftJson = {
  /**
   * @generated from field: int64 user_id = 1;
   */
  userId?: string;

  /**
   * @generated from field: string username = 2;
   */
  username?: string;

  /**
   * @generated from field: int64 total_online = 3;
   */
  totalOnline?: string;
};

/**
 * Describes the message clicker.UserLeft.
 * Use `create(UserLeftSchema)` to create a new message.
 */
export declare const UserLeftSchema: GenMessage<UserLeft, UserLeftJson>;

/**
 * @generated from message clicker.CityNameSet
 */
export declare type CityNameSet = Message<"clicker.CityNameSet"> & {
  /**
   * @generated from field: string city_name = 1;
   */
  cityName: string;

  /**
   * @generated from field: string city_username = 2;
   */
  cityUsername: string;
};

/**
 * JSON type for the message clicker.CityNameSet.
 */
export declare type CityNameSetJson = {
  /**
   * @generated from field: string city_name = 1;
   */
  cityName?: string;

  /**
   * @generated from field: string city_username = 2;
   */
  cityUsername?: string;
};

/**
 * Describes the message clicker.CityNameSet.
 * Use `create(CityNameSetSchema)` to create a new message.
 */
export declare const CityNameSetSchema: GenMessage<CityNameSet, CityNameSetJson>;

/**
 * @generated from message clicker.Top
 */
export declare type Top = Message<"clicker.Top"> & {
  /**
   * @generated from field: int64 user_id = 1;
   */
  userId: bigint;

  /**
   * @generated from field: repeated clicker.TopRoom rooms = 2;
   */
  rooms: TopRoom[];
};

/**
 * JSON type for the message clicker.Top.
 */
export declare type TopJson = {
  /**
   * @generated from field: int64 user_id = 1;
   */
  userId?: string;

  /**
   * @generated from field: repeated clicker.TopRoom rooms = 2;
   */
  rooms?: TopRoomJson[];
};

/**
 * Describes the message clicker.Top.
 * Use `create(TopSchema)` to create a new message.
 */
export declare const TopSchema: GenMessage<Top, TopJson>;

/**
 * @generated from message clicker.TopRoom
 */
export declare type TopRoom = Message<"clicker.TopRoom"> & {
  /**
   * @generated from field: int64 room_id = 1;
   */
  roomId: bigint;

  /**
   * @generated from field: string room_name = 2;
   */
  roomName: string;

  /**
   * @generated from field: int64 total_amount = 3;
   */
  totalAmount: bigint;

  /**
   * @generated from field: int64 total_online = 4;
   */
  totalOnline: bigint;
};

/**
 * JSON type for the message clicker.TopRoom.
 */
export declare type TopRoomJson = {
  /**
   * @generated from field: int64 room_id = 1;
   */
  roomId?: string;

  /**
   * @generated from field: string room_name = 2;
   */
  roomName?: string;

  /**
   * @generated from field: int64 total_amount = 3;
   */
  totalAmount?: string;

  /**
   * @generated from field: int64 total_online = 4;
   */
  totalOnline?: string;
};

/**
 * Describes the message clicker.TopRoom.
 * Use `create(TopRoomSchema)` to create a new message.
 */
export declare const TopRoomSchema: GenMessage<TopRoom, TopRoomJson>;

/**
 * @generated from message clicker.TotalOnline
 */
export declare type TotalOnline = Message<"clicker.TotalOnline"> & {
  /**
   * @generated from field: int64 total_online = 1;
   */
  totalOnline: bigint;
};

/**
 * JSON type for the message clicker.TotalOnline.
 */
export declare type TotalOnlineJson = {
  /**
   * @generated from field: int64 total_online = 1;
   */
  totalOnline?: string;
};

/**
 * Describes the message clicker.TotalOnline.
 * Use `create(TotalOnlineSchema)` to create a new message.
 */
export declare const TotalOnlineSchema: GenMessage<TotalOnline, TotalOnlineJson>;

/**
 * @generated from message clicker.RoomUpdate
 */
export declare type RoomUpdate = Message<"clicker.RoomUpdate"> & {
  /**
   * @generated from field: int64 total_online = 1;
   */
  totalOnline: bigint;

  /**
   * @generated from field: int64 total_room_amount = 2;
   */
  totalRoomAmount: bigint;

  /**
   * @generated from field: int64 total_available = 3;
   */
  totalAvailable: bigint;

  /**
   * @generated from field: map<int32, uint64> claiming_houses = 4;
   */
  claimingHouses: { [key: number]: bigint };

  /**
   * @generated from field: map<int32, clicker.HouseState> states = 5;
   */
  states: { [key: number]: HouseState };

  /**
   * @generated from field: map<int32, clicker.RewardVariant> next_rewards = 6;
   */
  nextRewards: { [key: number]: RewardVariant };
};

/**
 * JSON type for the message clicker.RoomUpdate.
 */
export declare type RoomUpdateJson = {
  /**
   * @generated from field: int64 total_online = 1;
   */
  totalOnline?: string;

  /**
   * @generated from field: int64 total_room_amount = 2;
   */
  totalRoomAmount?: string;

  /**
   * @generated from field: int64 total_available = 3;
   */
  totalAvailable?: string;

  /**
   * @generated from field: map<int32, uint64> claiming_houses = 4;
   */
  claimingHouses?: { [key: number]: string };

  /**
   * @generated from field: map<int32, clicker.HouseState> states = 5;
   */
  states?: { [key: number]: HouseStateJson };

  /**
   * @generated from field: map<int32, clicker.RewardVariant> next_rewards = 6;
   */
  nextRewards?: { [key: number]: RewardVariantJson };
};

/**
 * Describes the message clicker.RoomUpdate.
 * Use `create(RoomUpdateSchema)` to create a new message.
 */
export declare const RoomUpdateSchema: GenMessage<RoomUpdate, RoomUpdateJson>;

/**
 * @generated from enum clicker.RoomVariant
 */
export enum RoomVariant {
  /**
   * @generated from enum value: User = 0;
   */
  User = 0,

  /**
   * @generated from enum value: Promo = 1;
   */
  Promo = 1,
}

/**
 * JSON type for the enum clicker.RoomVariant.
 */
export declare type RoomVariantJson = "User" | "Promo";

/**
 * Describes the enum clicker.RoomVariant.
 */
export declare const RoomVariantSchema: GenEnum<RoomVariant, RoomVariantJson>;

/**
 * @generated from enum clicker.RewardVariant
 */
export enum RewardVariant {
  /**
   * @generated from enum value: None = 0;
   */
  None = 0,

  /**
   * @generated from enum value: Cheese = 1;
   */
  Cheese = 1,

  /**
   * @generated from enum value: Bone = 2;
   */
  Bone = 2,

  /**
   * @generated from enum value: USDT = 3;
   */
  USDT = 3,

  /**
   * @generated from enum value: TON = 4;
   */
  TON = 4,

  /**
   * @generated from enum value: GEM = 5;
   */
  GEM = 5,
}

/**
 * JSON type for the enum clicker.RewardVariant.
 */
export declare type RewardVariantJson = "None" | "Cheese" | "Bone" | "USDT" | "TON" | "GEM";

/**
 * Describes the enum clicker.RewardVariant.
 */
export declare const RewardVariantSchema: GenEnum<RewardVariant, RewardVariantJson>;

/**
 * @generated from enum clicker.HouseState
 */
export enum HouseState {
  /**
   * @generated from enum value: Inactive = 0;
   */
  Inactive = 0,

  /**
   * @generated from enum value: Digging = 1;
   */
  Digging = 1,

  /**
   * @generated from enum value: Claiming = 2;
   */
  Claiming = 2,

  /**
   * @generated from enum value: Empty = 3;
   */
  Empty = 3,
}

/**
 * JSON type for the enum clicker.HouseState.
 */
export declare type HouseStateJson = "Inactive" | "Digging" | "Claiming" | "Empty";

/**
 * Describes the enum clicker.HouseState.
 */
export declare const HouseStateSchema: GenEnum<HouseState, HouseStateJson>;

/**
 * @generated from service clicker.API
 */
export declare const API: GenService<{
  /**
   * @generated from rpc clicker.API.Me
   */
  me: {
    methodKind: "unary";
    input: typeof MeRequestSchema;
    output: typeof MeResponseSchema;
  },
  /**
   * @generated from rpc clicker.API.LookupRoom
   */
  lookupRoom: {
    methodKind: "unary";
    input: typeof LookupRoomRequestSchema;
    output: typeof RoomResponseSchema;
  },
  /**
   * @generated from rpc clicker.API.PromoRooms
   */
  promoRooms: {
    methodKind: "unary";
    input: typeof PromoRoomsRequestSchema;
    output: typeof RoomsResponseSchema;
  },
  /**
   * @generated from rpc clicker.API.CheckPromoRoomAccess
   */
  checkPromoRoomAccess: {
    methodKind: "unary";
    input: typeof CheckPromoRoomAccessRequestSchema;
    output: typeof CheckPromoRoomAccessResponseSchema;
  },
  /**
   * @generated from rpc clicker.API.BoostHourInvoice
   */
  boostHourInvoice: {
    methodKind: "unary";
    input: typeof InvoiceRequestSchema;
    output: typeof InvoiceResponseSchema;
  },
  /**
   * @generated from rpc clicker.API.BoostDayInvoice
   */
  boostDayInvoice: {
    methodKind: "unary";
    input: typeof InvoiceRequestSchema;
    output: typeof InvoiceResponseSchema;
  },
  /**
   * @generated from rpc clicker.API.BoostWeekInvoice
   */
  boostWeekInvoice: {
    methodKind: "unary";
    input: typeof InvoiceRequestSchema;
    output: typeof InvoiceResponseSchema;
  },
  /**
   * @generated from rpc clicker.API.BuySpotInvoice
   */
  buySpotInvoice: {
    methodKind: "unary";
    input: typeof SpotInvoiceRequestSchema;
    output: typeof InvoiceResponseSchema;
  },
  /**
   * @generated from rpc clicker.API.BuyIslandInvoice
   */
  buyIslandInvoice: {
    methodKind: "unary";
    input: typeof IslandInvoiceRequestSchema;
    output: typeof InvoiceResponseSchema;
  },
}>;

